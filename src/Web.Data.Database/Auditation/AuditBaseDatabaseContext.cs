using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using AMTools.Web.Data.Database.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;

namespace AMTools.Web.Data.Database
{

    /// <summary>
    /// BasisDbContext mit integriertem Logging von Veränderungen.
    /// Originale Idee: https://www.meziantou.net/entity-framework-core-history-audit-table.htm
    /// </summary>
    public abstract class AuditBaseDatabaseContext : DbContext
    {
        protected bool EnableAuditLog;

        public AuditBaseDatabaseContext(bool enableAuditLog)
        {
            EnableAuditLog = enableAuditLog;
        }

        /// <summary>Fügt den Datensatz zum DbAuditLog hinzu. </summary>
        protected abstract void AddToAuditLog(DbAuditLog dbAuditLog);

        /// <summary>
        /// Entscheidet darüber, ob das Objekt eine Instanz einer Klasse ist, die nicht im AuditLog erfasst werden soll.
        /// </summary>
        protected abstract bool ObjectIsInstanceOfForbiddenClass(object target);

        /// <summary>
        /// Entscheided darüber, ob der angegebene PropertyName in das AuditLog geschrieben werden soll.
        /// </summary>
        protected abstract bool PropertyIsForbidden(object entity, string propertyName);

        /// <summary>Ungetestet!</summary>
        public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default) => await base.SaveChangesAsync(cancellationToken);

        /// <summary>Ungetestet!</summary>
        public override async Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default)
        {
            if (EnableAuditLog)
            {
                List<AuditEntryBuilder> auditEntries = OnBeforeSaveChanges();
                int result = await base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
                await OnAfterSaveChanges(auditEntries);
                return result;
            }
            else
            {
                return await base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
            }
        }

        public override int SaveChanges() => base.SaveChanges();

        public override int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            if (EnableAuditLog)
            {
                List<AuditEntryBuilder> temporaryAuditEntries = OnBeforeSaveChanges();
                int result = base.SaveChanges(acceptAllChangesOnSuccess);
                OnAfterSaveChanges(temporaryAuditEntries);
                return result;
            }
            else
            {
                return base.SaveChanges(acceptAllChangesOnSuccess);
            }
        }

        private List<AuditEntryBuilder> OnBeforeSaveChanges()
        {
            ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntryBuilder>();
            foreach (EntityEntry entry in ChangeTracker.Entries())
            {
                if (ObjectIsInstanceOfForbiddenClass(entry.Entity) || entry.Entity is DbAuditLog || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                {
                    continue;
                }

                var newAuditEntry = new AuditEntryBuilder(entry);
                newAuditEntry.TableName = entry.Metadata.GetTableName();
                newAuditEntry.Operation = entry.State == EntityState.Added ? "INSERT" : entry.State == EntityState.Modified ? "UPDATE" : entry.State == EntityState.Deleted ? "DELETE" : null;

                foreach (var property in entry.Properties)
                {
                    string propertyName = property.Metadata.Name;

                    // Überprüfung, ob die Property im Log nicht erlaubt ist
                    if (PropertyIsForbidden(entry.Entity, propertyName))
                    {
                        continue;
                    }

                    if (entry.State == EntityState.Modified && !property.IsModified && !property.Metadata.IsPrimaryKey())
                    {
                        continue;
                    }

                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        newAuditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    if (property.Metadata.IsPrimaryKey())
                    {
                        newAuditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    switch (entry.State)
                    {
                        case EntityState.Added:
                            newAuditEntry.NewValues[propertyName] = property.CurrentValue;
                            break;

                        case EntityState.Deleted:
                            newAuditEntry.OldValues[propertyName] = property.OriginalValue;
                            break;

                        case EntityState.Modified:
                            if (property.IsModified)
                            {
                                newAuditEntry.OldValues[propertyName] = property.OriginalValue;
                                newAuditEntry.NewValues[propertyName] = property.CurrentValue;
                            }
                            break;
                    }
                }

                auditEntries.Add(newAuditEntry);
            }

            // Save audit entities that have all the modifications
            foreach (var auditEntry in auditEntries.Where(x => !x.HasTemporaryProperties))
            {
                AddToAuditLog(auditEntry.GetDbAuditLog());
            }

            // keep a list of entries where the value of some properties are unknown at this step
            return auditEntries.Where(x => x.HasTemporaryProperties).ToList();
        }

        /// <summary>
        /// Befüllt die Properties, die erst beim Speichern gefüllt wurden und fügt anschließend einen neuen Datensatz zum AuditLog hinzu.
        /// </summary>
        private Task OnAfterSaveChanges(List<AuditEntryBuilder> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
            {
                return Task.CompletedTask;
            }


            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                // Save the Audit entry
                AddToAuditLog(auditEntry.GetDbAuditLog());
            }

            return SaveChangesAsync();
        }
    }
}
